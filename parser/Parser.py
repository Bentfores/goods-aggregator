from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
import time
import os
from Producer import KafkaAvroProducer

KAFKA_BROKER = "localhost:9092"
SCHEMA_REGISTRY_URL = "http://localhost:8081"
TOPIC = "product-data"
SCHEMA_PATH = "product_schema.avsc"

def solve_captcha():
    # ‚úÖ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è iframe —Å –∫–∞–ø—á–µ–π
    WebDriverWait(driver, 100).until(
        EC.presence_of_element_located((By.ID, "baxia-dialog-content"))
    )

    # üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ iframe —Å –∫–∞–ø—á–µ–π
    iframe = driver.find_element(By.ID, "baxia-dialog-content")
    driver.switch_to.frame(iframe)
    print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ iframe")

    # üñ±Ô∏è –û–∂–∏–¥–∞–µ–º –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª–∑—É–Ω–æ–∫
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//span[contains(@class, 'btn_slide')]"))
    )
    slider = driver.find_element(By.XPATH, "//span[contains(@class, 'btn_slide')]")

    # üöÄ –î–≤–∏–≥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –≤–ø—Ä–∞–≤–æ
    action = ActionChains(driver, duration=5)
    action.click_and_hold(slider)
    for i in range(0, 360, 10):
        try:
            action.move_by_offset(i, 0)
        except Exception as e:
            continue
    action.release()
    action.perform()
    action.click_and_hold(slider).pause(1).move_by_offset(360, 10).release().perform()
    print("‚úÖ –ü–æ–ª–∑—É–Ω–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω!")

    # üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
    driver.switch_to.default_content()
    print("‚úÖ –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ")

alibaba_url = "https://www.alibaba.com/"

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
image_path = os.path.abspath("img/rope1.png")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver
options = webdriver.ChromeOptions()
options.add_argument("user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15")
options.add_argument("--disable-blink-features=AutomationControlled")

driver = webdriver.Chrome(options=options)

try:
    driver.get(alibaba_url)
    time.sleep(5)

    # solve_captcha()

    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "img-upload-button")))
    driver.find_element(By.XPATH, "//div[contains(@class, 'img-upload-button')]").click()
    time.sleep(3)
    upload_input = driver.find_element(By.XPATH, "//input[@type='file']")
    upload_input.send_keys(image_path)
    time.sleep(5)

    # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    offer_list = (WebDriverWait(driver, 10)
                  .until(EC.presence_of_element_located((By.CLASS_NAME, "img-search-offer-list"))))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    offers = offer_list.find_elements(By.XPATH, "./div")[:5]
    data = []

    for i in range(5):
        try:
            offer_list = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "img-search-offer-list"))
            )
            offers = offer_list.find_elements(By.XPATH, "./div")
            result = offers[i]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            seller_url = result.find_element(By.TAG_NAME, "a").get_attribute("href")
            image_url = result.find_element(By.TAG_NAME, "img").get_attribute("src")
            price = result.find_element(By.CLASS_NAME, "search-card-e-price-main").text

            rating_score = result.find_element(By.CLASS_NAME, "search-card-e-review")
            rating = rating_score.find_element(By.XPATH, "./strong").text

            years = result.find_element(By.CLASS_NAME, "margin-right-2").text

            driver.get(seller_url)
            time.sleep(5)

            price_block = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "price-list"))
            )
            price_rows = driver.find_elements(By.XPATH, "//div[contains(@class, 'price-item')]")

            min_price = None
            min_quantity = None

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–Ω
            for row in price_rows:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É
                    price_value = row.find_element(By.XPATH, ".//div[contains(@class, 'price')]").text

                    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —ç—Ç–æ–π —Ü–µ–Ω—ã
                    quantity = row.find_element(By.XPATH, ".//div[contains(@class, 'quality')]").text

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —á–∏—Å–ª–∞
                    price_float = float(price_value.replace("$", "").replace(",", ".").strip())

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                    if min_price is None or price_float < min_price:
                        min_price = price_float
                        min_quantity = quantity
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ü–µ–Ω—ã: {e}")
                    continue

            data.append({
                "image": image_url,
                "price_main": price,  # –¶–µ–Ω–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
                "min_price": min_price,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
                "min_quantity": min_quantity,
                "rating": rating,
                "years": years,
                "url": seller_url
            })

            driver.back()

        except Exception as e:
            print(f"Error extracting data: {e}")
            continue

    # –ü–µ—á–∞—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for item in data:
        print(item)


    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
    producer = KafkaAvroProducer(KAFKA_BROKER, SCHEMA_REGISTRY_URL, TOPIC, SCHEMA_PATH)


finally:
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    driver.quit()

